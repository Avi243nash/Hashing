Given an array of integers A of size N and an integer B.

array A is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2 ).

You are given a target value, B, to search. If found in the array, print its index; otherwise, print -1.

You may assume no duplicate exists in the array.

Note

Array A was sorted in non-decreasing order before rotation.

You need to think of an O(log n) solution.

Input Format
The first line given is an integer N, denoting the size of array A.

The second line given is N integers, the elements of array A.

The third line given is the integer B.

Output Format
Print index of B in array A; otherwise, print -1.

Example 1
Input

8
4 5 6 7 0 1 2 3
4
Output

0
Explanation

Target 4 is found at index 0 in A.

Example 2
Input

4
5 17 100 3
6
Output

-1
Explanation

6 is not present in the array.

Constraints
1 <= N <= 1000000

1 <= A[i] <= 10^9

all elements in A are distinct.
-------------------------------
-----------------------------
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
  public static void main (String[] args)
	{
    Scanner sc = new Scanner(System.in);
	    
	  int N = sc.nextInt();
	  int[] A = new int[N];
	  for(int i=0;i<N;i++){
          A[i] = sc.nextInt();
      }
	  int B = sc.nextInt();
	  Solution ob = new Solution();
    System.out.println(ob.search(A,B));
		
	}
}

class Solution{
    public int binarysearch(int st,int end,int[] arr,int target)
    {
        while(st<=end)
            {
                int mid = (st+end)/2;
                if(arr[mid]== target)
                    return mid;
                else if(arr[mid]>target)
                {
                    end = mid-1;
                }
                else
                {
                    st = mid+1;
                }
            }
        return -1;
    }
    public int search(final int[] arr, int target) {
        //Write code here
        int n = arr.length;
        int st = 0;
        int end = n-1;
        int largestIndex = -1;
        while(st<=end)
            {
                int mid = (st+end)/2;
                if(arr[0]<arr[mid])
                {
                    // u r in the greater part
                    largestIndex = mid;
                    st = mid+1;
                }
                else
                {
                    //smaller part
                    end = mid-1;
                }
            }
        // i have largest no index now
        int idx1 = binarysearch(0,largestIndex,arr,target);
        int idx2 = binarysearch(largestIndex+1,n-1,arr,target);
        if(idx1 != -1)
        {
            return idx1;
        }
        else
        {
            return idx2;
        }
    }
}
